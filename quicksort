import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class Quicksort {
	static int Limite = 2; //aqui se define el tamaño del arreglo
	static int numVeces=0;
	
	public static void main(String[] args) {
		//declaramos el numero de veces que queremos que el programa nos organice el arreglo 
		System.out.println("¿Cuantas veces desea ejecutar el programa?: ");
		Scanner numVecesEjecuta = new Scanner(System.in);
		numVeces = Integer.parseInt(numVecesEjecuta.nextLine());
		numVecesEjecuta.close();
		
		int arreglo[] = new int[Limite];
		
		imprimeArreglo(arreglo, Limite);
		
		
	}
	/**Necesita saber cual es al valor maimo del array
	 * @param arreglo
	 * @param maxValue
	 */
	
	public static void 	imprimeArreglo(int[] arreglo, int maxValue) {
		double TotalTiempo=0;
		long Inicio=0;
		List<Double> listaSuma = new ArrayList<Double>();
		
		for(int k=0;k<10;k++) {
		for(int i=0;i<numVeces;i++) {
			LlenaAzar(arreglo);
			imprimeArreglo(arreglo, maxValue);
			
			Inicio = System.currentTimeMillis(); 
			
			TotalTiempo += System.currentTimeMillis() - Inicio;
		}
		listaSuma.add(TotalTiempo);
		}
		double suma = 0;
        for (int n=0;n<listaSuma.size();n++)
        {
            Double valor;
            valor = listaSuma.get(n);
            suma += valor;
        }
        
        int resultado =  (int) suma;
        
        System.out.println("promedio de 10 veces realizado es: " +resultado/10);//promedio
        System.out.println(listaSuma);
		System.out.println("Total tiempo en milisegundos: " + TotalTiempo);
		
		
		
	}
	
	
	  public static void quicksort(int[] arreglo, int izq, int der) {
		    
	        // ELEGIR PIVOTE
	        int pivote = arreglo[izq];
	        
	        // LOS ELEMENTOS > AL PIVOTE VAN A LA DERECHA, LOS < A LA IZQUIERDA
	        // VARIABLES AUXILIARES: 
	        // i PARA LOS ELEMENTOS DE LA IZQUIERDA
	        // j PARA LOS ELEMENTOS DE LA DERECHA
	        int i = izq;
	        int j = der;
	        
	        int swap;
	        
	        // SE EVALUAN LOS ELEMENTOS PARA UBICAR EL NUEVO PIVOTE
	        while(i < j) {
	            // MIENTRAS QUE arreglo[i] SEA MENOR O IGUAL AL PIVOTE SE AUMENTA EL VALOR DE i
	            // CUANDO NO SE CUMPLE EL WHILE, EL ELEMENTO EN arreglo[i] ES MAYOR AL PIVOTE
	            // Y DEBE IR A LA DERECHA
	            while(arreglo[i] <= pivote && i < j) {
	                i++;
	            }
	            // MIENTRAS QUE EL arreglo[j] SEA MAYOR AL PIVOTE SE DISMINUYE j
	            // CUANDO NO SE CUMPLE EL WHILE EL ELEMENTO EN arreglo[j] ES MENOR O IGUAL AL PIVOTE
	            // Y DEBE IR A LA IZQUIERDA
	            while(arreglo[j] > pivote) {
	                j--;
	            }
	            // SIEMPRE Y CUANDO i SEA MENOR A j, SE HACE UN CAMBIO DE LOS ELEMENTOS
	            if(i < j) {
	                swap = arreglo[i];
	                arreglo[i] = arreglo[j];
	                arreglo[j] = swap;
	               
	               
	            }
	        }
	        arreglo[izq] = arreglo[j];
	        arreglo[j] = pivote;
	        
	        if(izq < j - 1) {
	            quicksort(arreglo, izq, j - 1);
	        }
	        if(j + 1 < der) {
	            quicksort(arreglo, j + 1, der);
	        }   
	    }
	
	static void LlenaAzar(int numerosA[]) {
	Random Azar = new Random();
	for (int cont = 0; cont < numerosA.length; cont++) {
		numerosA[cont] = Azar.nextInt(Limite);
	}
}
}
